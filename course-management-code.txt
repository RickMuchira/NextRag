]633;E;echo "# Course Management System Code Extraction";3a6c4407-fe9b-40e4-9209-ae754fdcf690]633;C# Course Management System Code Extraction
# Generated: Wed 07 May 2025 02:28:16 PM EAT



==========================================
FILE: src/app/courses/page.tsx
==========================================

"use client"

import { useState, useEffect } from "react"
import PageLayout from "@/components/page-layout"
import { motion } from "framer-motion"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { FileText, ArrowRight, Plus } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { toast } from "sonner"

type Course = {
  id: string
  name: string
  description: string | null
  createdAt: string
  updatedAt: string
  _count: {
    units: number
    semesters: number
    documents: number
  }
}

export default function CoursesPage() {
  const [courses, setCourses] = useState<Course[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    let isMounted = true

    const fetchCourses = async () => {
      try {
        setIsLoading(true)

        // Use a timestamp query parameter to prevent caching
        const timestamp = new Date().getTime()
        const res = await fetch(`/api/courses?t=${timestamp}`, {
          cache: "no-store",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Pragma: "no-cache",
            Expires: "0",
          },
        })

        if (!res.ok) {
          throw new Error("Failed to fetch courses")
        }

        const data = await res.json()
        if (isMounted) {
          setCourses(data)
        }
      } catch (error) {
        console.error("Error fetching courses:", error)
        if (isMounted) {
          toast.error("Failed to load courses. Please try again.")
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    fetchCourses()

    return () => {
      isMounted = false
    }
  }, [])

  return (
    <PageLayout>
      <div className="container mx-auto px-6 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-6 flex justify-between items-center"
        >
          <div>
            <h1 className="text-3xl font-bold text-white">Courses</h1>
            <p className="text-gray-400 mt-2">Browse all available courses</p>
          </div>

          <Link href="/courses/create">
            <Button className="bg-purple-600 hover:bg-purple-700 text-white">
              <Plus className="w-4 h-4 mr-2" />
              Create Course
            </Button>
          </Link>
        </motion.div>

        {isLoading ? (
          <div className="text-center py-12">
            <div className="h-8 w-8 mx-auto mb-4 animate-spin rounded-full border-4 border-white border-t-transparent"></div>
            <p className="text-gray-400">Loading courses...</p>
          </div>
        ) : courses.length === 0 ? (
          <div className="bg-black/30 backdrop-blur-md border-white/10 rounded-lg p-12 text-center">
            <h2 className="text-xl font-medium text-white mb-3">No Courses Yet</h2>
            <p className="text-gray-400 mb-6">Get started by creating your first course.</p>
            <Link href="/courses/create">
              <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                <Plus className="w-4 h-4 mr-2" />
                Create Your First Course
              </Button>
            </Link>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {courses.map((course, index) => (
              <motion.div
                key={course.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Card className="bg-black/30 backdrop-blur-md border-white/10 overflow-hidden h-full flex flex-col">
                  <div className="h-40 bg-gradient-to-r from-purple-900/30 to-blue-900/30 flex items-center justify-center">
                    <FileText className="w-16 h-16 text-purple-500/50" />
                  </div>
                  <CardHeader>
                    <CardTitle className="text-white">{course.name}</CardTitle>
                  </CardHeader>
                  <CardContent className="flex-grow flex flex-col">
                    <p className="text-gray-300 mb-4">{course.description || "No description available"}</p>

                    <div className="grid grid-cols-3 gap-2 mb-4">
                      <div className="flex items-center text-gray-400 text-sm">
                        <FileText className="w-4 h-4 mr-2 text-purple-500" />
                        <span>{course._count.documents} Docs</span>
                      </div>
                      <div className="flex items-center text-gray-400 text-sm">
                        <FileText className="w-4 h-4 mr-2 text-purple-500" />
                        <span>{course._count.units} Units</span>
                      </div>
                      <div className="flex items-center text-gray-400 text-sm">
                        <FileText className="w-4 h-4 mr-2 text-purple-500" />
                        <span>{course._count.semesters} Sems</span>
                      </div>
                    </div>

                    <div className="text-gray-400 text-sm mb-4">
                      <span>Created: {new Date(course.createdAt).toLocaleDateString()}</span>
                    </div>

                    <div className="mt-auto">
                      <Link href={`/courses/${course.id}`}>
                        <Button className="w-full bg-purple-600 hover:bg-purple-700 text-white">
                          View Course
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                      </Link>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        )}
      </div>
    </PageLayout>
  )
}
✅ File extracted


==========================================
FILE: src/app/courses/create/page.tsx
==========================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { toast } from "sonner"

const formSchema = z.object({
  name: z.string().min(2, {
    message: "Course name must be at least 2 characters.",
  }),
})

export default function CourseCreatePage() {
  const [isCreating, setIsCreating] = useState(false)
  const router = useRouter()

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsCreating(true)
    if (!values.name) {
      toast.error("Course name is required")
      setIsCreating(false)
      return
    }

    try {
      const response = await fetch("/api/courses", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      })

      if (response.ok) {
        toast.success("Course created successfully")
        router.refresh()
        router.push("/courses")
      } else {
        toast.error("Failed to create course. Please try again.")
      }
    } catch (error) {
      toast.error("Failed to create course. Please try again.")
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className="container mx-auto py-10">
      <div className="rounded-lg border bg-card text-card-foreground shadow-sm w-full max-w-md mx-auto">
        <div className="p-6">
          <h1 className="text-2xl font-semibold mb-4">Create Course</h1>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Course Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter course name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isCreating}>
                {isCreating ? "Creating..." : "Create"}
              </Button>
            </form>
          </Form>
        </div>
      </div>
    </div>
  )
}
✅ File extracted


==========================================
FILE: src/app/courses/[courseId]/page.tsx
==========================================

// src/app/courses/[courseId]/page.tsx
"use client"

import { useState, useEffect } from "react"
import PageLayout from "@/components/page-layout"
import { motion } from "framer-motion"
import { useParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { ArrowLeft, BookOpen, Calendar, Layers, FileText, Edit, Plus, Trash2 } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { toast } from "sonner"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"

type Course = {
  id: string
  name: string
  description: string | null
  createdAt: string
  updatedAt: string
  units: Unit[]
  semesters: Semester[]
  documents: Document[]
}

type Unit = {
  id: string
  name: string
  description: string | null
}

type Semester = {
  id: string
  name: string
}

type Document = {
  id: string
  title: string
  description: string | null
  fileName: string
  fileType: string
  createdAt: string
}

export default function CourseDetailPage() {
  const params = useParams()
  const router = useRouter()
  const courseId = params.courseId as string

  const [course, setCourse] = useState<Course | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isDeleting, setIsDeleting] = useState(false)

  useEffect(() => {
    let isMounted = true

    const fetchCourse = async () => {
      try {
        setIsLoading(true)
        // Add timestamp to prevent caching
        const timestamp = new Date().getTime()
        const res = await fetch(`/api/courses/${courseId}?t=${timestamp}`, {
          cache: "no-store",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Pragma: "no-cache",
            Expires: "0",
          },
        })

        if (!res.ok) {
          throw new Error("Failed to fetch course details")
        }

        const data = await res.json()
        if (isMounted) {
          setCourse(data)
        }
      } catch (error) {
        console.error("Error fetching course:", error)
        if (isMounted) {
          toast.error("Failed to load course details. Please try again.")
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    fetchCourse()

    return () => {
      isMounted = false
    }
  }, [courseId])

  const handleDelete = async () => {
    try {
      setIsDeleting(true)
      const res = await fetch(`/api/courses/${courseId}`, {
        method: "DELETE",
      })

      if (!res.ok) {
        throw new Error("Failed to delete course")
      }

      toast.success("Course deleted successfully")

      router.push("/courses")
    } catch (error) {
      console.error("Error deleting course:", error)
      toast.error("Failed to delete course. Please try again.")
    } finally {
      setIsDeleting(false)
    }
  }

  const getFileIcon = (fileType: string) => {
    switch (fileType) {
      case "application/pdf":
        return <FileText className="w-5 h-5 text-red-500" />
      case "application/msword":
      case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        return <FileText className="w-5 h-5 text-blue-500" />
      case "application/vnd.ms-powerpoint":
      case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
        return <FileText className="w-5 h-5 text-orange-500" />
      case "application/vnd.ms-excel":
      case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        return <FileText className="w-5 h-5 text-green-500" />
      default:
        if (fileType.startsWith("image/")) {
          return <FileText className="w-5 h-5 text-purple-500" />
        }
        return <FileText className="w-5 h-5 text-gray-400" />
    }
  }

  return (
    <PageLayout>
      <div className="container mx-auto px-6 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-6 flex justify-between items-center"
        >
          <Link href="/courses">
            <Button variant="ghost" className="text-gray-300 hover:text-white">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Courses
            </Button>
          </Link>

          {!isLoading && course && (
            <div className="flex space-x-2">
              <Link href={`/courses/${courseId}/edit`}>
                <Button variant="outline" className="border-white/20 text-white hover:bg-white/5">
                  <Edit className="mr-2 h-4 w-4" />
                  Edit Course
                </Button>
              </Link>

              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button variant="outline" className="border-white/20 text-white hover:bg-white/5 hover:text-red-400">
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent className="bg-black/90 border-white/10 text-white">
                  <AlertDialogHeader>
                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                    <AlertDialogDescription className="text-gray-400">
                      This will permanently delete this course and all associated units, semesters, and documents. This
                      action cannot be undone.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel className="bg-transparent border-white/20 text-white hover:bg-white/10">
                      Cancel
                    </AlertDialogCancel>
                    <AlertDialogAction
                      className="bg-red-600 hover:bg-red-700 text-white"
                      onClick={handleDelete}
                      disabled={isDeleting}
                    >
                      {isDeleting ? "Deleting..." : "Delete Course"}
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
          )}
        </motion.div>

        {isLoading ? (
          <div className="text-center py-12">
            <div className="h-8 w-8 mx-auto mb-4 animate-spin rounded-full border-4 border-white border-t-transparent"></div>
            <p className="text-gray-400">Loading course details...</p>
          </div>
        ) : course ? (
          <>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
              className="mb-8"
            >
              <Card className="bg-black/30 backdrop-blur-md border-white/10">
                <CardHeader>
                  <div className="flex items-center">
                    <BookOpen className="w-8 h-8 text-purple-500 mr-3" />
                    <CardTitle className="text-3xl text-white">{course.name}</CardTitle>
                  </div>
                  {course.description && (
                    <CardDescription className="text-gray-300 text-base mt-2">{course.description}</CardDescription>
                  )}
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-3">
                    <Badge className="bg-purple-900/30 text-purple-300 flex items-center">
                      <Calendar className="w-3 h-3 mr-1" />
                      {course.semesters.length} Semesters
                    </Badge>
                    <Badge className="bg-purple-900/30 text-purple-300 flex items-center">
                      <Layers className="w-3 h-3 mr-1" />
                      {course.units.length} Units
                    </Badge>
                    <Badge className="bg-purple-900/30 text-purple-300 flex items-center">
                      <FileText className="w-3 h-3 mr-1" />
                      {course.documents.length} Documents
                    </Badge>
                  </div>
                  <div className="text-gray-400 text-sm mt-4">
                    Created: {new Date(course.createdAt).toLocaleDateString()}
                    <span className="mx-2">•</span>
                    Last updated: {new Date(course.updatedAt).toLocaleDateString()}
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <Tabs defaultValue="units" className="w-full">
                <TabsList className="bg-black/50 border border-white/10 w-full justify-start mb-6">
                  <TabsTrigger value="units" className="data-[state=active]:bg-purple-900/30">
                    <Layers className="w-4 h-4 mr-2" />
                    Units
                  </TabsTrigger>
                  <TabsTrigger value="semesters" className="data-[state=active]:bg-purple-900/30">
                    <Calendar className="w-4 h-4 mr-2" />
                    Semesters
                  </TabsTrigger>
                  <TabsTrigger value="documents" className="data-[state=active]:bg-purple-900/30">
                    <FileText className="w-4 h-4 mr-2" />
                    Documents
                  </TabsTrigger>
                </TabsList>

                {/* Units Tab */}
                <TabsContent value="units">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-white">Units</h2>
                    <Link href={`/courses/${courseId}/units/new`}>
                      <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                        <Plus className="w-4 h-4 mr-2" />
                        Add Unit
                      </Button>
                    </Link>
                  </div>

                  {course.units.length === 0 ? (
                    <Card className="bg-black/30 border-white/10">
                      <CardHeader>
                        <CardTitle className="text-white">No Units Yet</CardTitle>
                        <CardDescription className="text-gray-400">
                          Create units to organize your course content by topic.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="flex justify-center">
                        <Link href={`/courses/${courseId}/units/new`}>
                          <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                            <Plus className="w-4 h-4 mr-2" />
                            Add First Unit
                          </Button>
                        </Link>
                      </CardContent>
                    </Card>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {course.units.map((unit, index) => (
                        <motion.div
                          key={unit.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.5, delay: 0.1 + index * 0.05 }}
                        >
                          <Card className="bg-black/30 border-white/10 hover:bg-black/50 transition-colors h-full">
                            <CardHeader>
                              <div className="flex items-center">
                                <Layers className="w-5 h-5 text-purple-500 mr-2" />
                                <CardTitle className="text-white">{unit.name}</CardTitle>
                              </div>
                              {unit.description && (
                                <CardDescription className="text-gray-400 mt-2">{unit.description}</CardDescription>
                              )}
                            </CardHeader>
                            <CardContent>
                              <div className="flex justify-end">
                                <Link href={`/courses/${courseId}/units/${unit.id}/edit`}>
                                  <Button variant="ghost" className="text-white hover:bg-white/10 mr-2">
                                    <Edit className="w-4 h-4" />
                                  </Button>
                                </Link>
                                <Button variant="ghost" className="text-white hover:bg-white/10 hover:text-red-400">
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </CardContent>
                          </Card>
                        </motion.div>
                      ))}
                    </div>
                  )}
                </TabsContent>

                {/* Semesters Tab */}
                <TabsContent value="semesters">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-white">Semesters</h2>
                    <Link href={`/courses/${courseId}/semesters/new`}>
                      <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                        <Plus className="w-4 h-4 mr-2" />
                        Add Semester
                      </Button>
                    </Link>
                  </div>

                  {course.semesters.length === 0 ? (
                    <Card className="bg-black/30 border-white/10">
                      <CardHeader>
                        <CardTitle className="text-white">No Semesters Yet</CardTitle>
                        <CardDescription className="text-gray-400">
                          Create semesters to organize your course content by time period.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="flex justify-center">
                        <Link href={`/courses/${courseId}/semesters/new`}>
                          <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                            <Plus className="w-4 h-4 mr-2" />
                            Add First Semester
                          </Button>
                        </Link>
                      </CardContent>
                    </Card>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {course.semesters.map((semester, index) => (
                        <motion.div
                          key={semester.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.5, delay: 0.1 + index * 0.05 }}
                        >
                          <Card className="bg-black/30 border-white/10 hover:bg-black/50 transition-colors">
                            <CardHeader>
                              <div className="flex items-center">
                                <Calendar className="w-5 h-5 text-purple-500 mr-2" />
                                <CardTitle className="text-white">{semester.name}</CardTitle>
                              </div>
                            </CardHeader>
                            <CardContent>
                              <div className="flex justify-end">
                                <Link href={`/courses/${courseId}/semesters/${semester.id}/edit`}>
                                  <Button variant="ghost" className="text-white hover:bg-white/10 mr-2">
                                    <Edit className="w-4 h-4" />
                                  </Button>
                                </Link>
                                <Button variant="ghost" className="text-white hover:bg-white/10 hover:text-red-400">
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </CardContent>
                          </Card>
                        </motion.div>
                      ))}
                    </div>
                  )}
                </TabsContent>

                {/* Documents Tab */}
                <TabsContent value="documents">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-white">Documents</h2>
                    <Link href={`/documents/new?courseId=${courseId}`}>
                      <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                        <Plus className="w-4 h-4 mr-2" />
                        Add Document
                      </Button>
                    </Link>
                  </div>

                  {course.documents.length === 0 ? (
                    <Card className="bg-black/30 border-white/10">
                      <CardHeader>
                        <CardTitle className="text-white">No Documents Yet</CardTitle>
                        <CardDescription className="text-gray-400">
                          Upload documents to organize content for this course.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="flex justify-center">
                        <Link href={`/documents/new?courseId=${courseId}`}>
                          <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                            <Plus className="w-4 h-4 mr-2" />
                            Upload First Document
                          </Button>
                        </Link>
                      </CardContent>
                    </Card>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {course.documents.map((doc, index) => (
                        <motion.div
                          key={doc.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.5, delay: 0.1 + index * 0.05 }}
                        >
                          <Link href={`/documents/${doc.id}`}>
                            <Card className="bg-black/30 border-white/10 hover:bg-black/50 transition-colors">
                              <CardContent className="p-4">
                                <div className="flex items-start">
                                  <div className="mr-3 mt-1">{getFileIcon(doc.fileType)}</div>
                                  <div>
                                    <h3 className="text-white font-medium">{doc.title}</h3>
                                    {doc.description && (
                                      <p className="text-gray-400 text-sm line-clamp-2 mt-1">{doc.description}</p>
                                    )}
                                    <p className="text-gray-500 text-xs mt-2">
                                      {new Date(doc.createdAt).toLocaleDateString()}
                                    </p>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          </Link>
                        </motion.div>
                      ))}
                    </div>
                  )}
                </TabsContent>
              </Tabs>
            </motion.div>
          </>
        ) : (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="text-center py-12 bg-black/30 backdrop-blur-md border-white/10 rounded-lg"
          >
            <BookOpen className="w-16 h-16 text-purple-500/50 mx-auto mb-4" />
            <h2 className="text-xl font-medium text-white mb-2">Course Not Found</h2>
            <p className="text-gray-400 mb-6">The course you're looking for doesn't exist or has been deleted.</p>
            <Link href="/courses">
              <Button className="bg-purple-600 hover:bg-purple-700 text-white">Go Back to Courses</Button>
            </Link>
          </motion.div>
        )}
      </div>
    </PageLayout>
  )
}
✅ File extracted


==========================================
FILE: src/app/courses/[courseId]/edit/page.tsx
==========================================

// src/app/courses/[courseId]/edit/page.tsx
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import PageLayout from "@/components/page-layout"
import { motion } from "framer-motion"
import { useParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ArrowLeft, BookOpen } from "lucide-react"
import Link from "next/link"
import { toast } from "sonner"

export default function EditCoursePage() {
  const params = useParams()
  const router = useRouter()
  const courseId = params.courseId as string

  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState({
    name: "",
    description: "",
  })

  useEffect(() => {
    let isMounted = true

    const fetchCourse = async () => {
      try {
        setIsLoading(true)
        // Add timestamp to prevent caching
        const timestamp = new Date().getTime()
        const res = await fetch(`/api/courses/${courseId}?t=${timestamp}`, {
          cache: "no-store",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Pragma: "no-cache",
            Expires: "0",
          },
        })

        if (!res.ok) {
          throw new Error("Failed to fetch course details")
        }

        const data = await res.json()
        if (isMounted) {
          setFormData({
            name: data.name,
            description: data.description || "",
          })
        }
      } catch (error) {
        console.error("Error fetching course:", error)
        if (isMounted) {
          toast.error("Failed to load course details. Please try again.")
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    fetchCourse()

    return () => {
      isMounted = false
    }
  }, [courseId])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.name.trim()) {
      toast.error("Course name is required")
      return
    }

    setIsSubmitting(true)

    try {
      const response = await fetch(`/api/courses/${courseId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      })

      if (!response.ok) {
        throw new Error("Failed to update course")
      }

      toast.success("Course updated successfully")

      router.push(`/courses/${courseId}`)
    } catch (error) {
      console.error("Error updating course:", error)
      toast.error("Failed to update course. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <PageLayout>
      <div className="container mx-auto px-6 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-6"
        >
          <Link href={`/courses/${courseId}`}>
            <Button variant="ghost" className="text-gray-300 hover:text-white">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Course
            </Button>
          </Link>
        </motion.div>

        {isLoading ? (
          <div className="text-center py-12">
            <div className="h-8 w-8 mx-auto mb-4 animate-spin rounded-full border-4 border-white border-t-transparent"></div>
            <p className="text-gray-400">Loading course details...</p>
          </div>
        ) : (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Card className="bg-black/30 backdrop-blur-md border-white/10">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <BookOpen className="w-5 h-5 mr-2 text-purple-500" />
                  Edit Course
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-300 mb-1">
                      Course Name <span className="text-red-500">*</span>
                    </label>
                    <Input
                      id="name"
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      placeholder="Enter course name"
                      className="bg-black/50 border-white/20 text-white"
                      required
                    />
                  </div>

                  <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-300 mb-1">
                      Description
                    </label>
                    <Textarea
                      id="description"
                      value={formData.description}
                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                      placeholder="Enter course description"
                      className="bg-black/50 border-white/20 text-white min-h-[120px]"
                    />
                  </div>

                  <div className="flex justify-end pt-4">
                    <Link href={`/courses/${courseId}`}>
                      <Button
                        type="button"
                        variant="outline"
                        className="mr-2 border-white/20 text-white hover:bg-white/5"
                        disabled={isSubmitting}
                      >
                        Cancel
                      </Button>
                    </Link>
                    <Button
                      type="submit"
                      disabled={isSubmitting}
                      className="bg-purple-600 hover:bg-purple-700 text-white"
                    >
                      {isSubmitting ? "Saving..." : "Save Changes"}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </PageLayout>
  )
}
✅ File extracted


==========================================
FILE: src/app/courses/[courseId]/units/new/page.tsx
==========================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { useParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { useForm } from "react-hook-form"
import { toast } from "sonner"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { Skeleton } from "@/components/ui/skeleton"

const formSchema = z.object({
  title: z.string().min(2, {
    message: "Title must be at least 2 characters.",
  }),
  description: z.string().min(10, {
    message: "Description must be at least 10 characters.",
  }),
  content: z.string().min(10, {
    message: "Content must be at least 10 characters.",
  }),
  unitType: z.enum(["ARTICLE", "VIDEO", "QUIZ"]).default("ARTICLE"),
})

const NewUnitPage = () => {
  const router = useRouter()
  const params = useParams()
  const courseId = params.courseId as string
  const [courseName, setCourseName] = useState<string>("")
  const [isLoadingCourse, setIsLoadingCourse] = useState<boolean>(true)

  useEffect(() => {
    let isMounted = true

    const fetchCourse = async () => {
      try {
        const res = await fetch(`/api/courses/${courseId}`, {
          cache: "no-store",
          next: { revalidate: 0 },
        })

        if (res.ok) {
          const data = await res.json()
          if (isMounted) {
            setCourseName(data.name)
          }
        }
      } catch (error) {
        console.error("Error fetching course:", error)
      } finally {
        if (isMounted) {
          setIsLoadingCourse(false)
        }
      }
    }

    fetchCourse()

    return () => {
      isMounted = false
    }
  }, [courseId])

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      description: "",
      content: "",
      unitType: "ARTICLE",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      const response = await fetch(`/api/courses/${courseId}/units`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      })

      if (response.ok) {
        toast.success("Unit created successfully!")
        router.push(`/courses/${courseId}`)
      } else {
        toast.error("Failed to create unit.")
      }
    } catch (error) {
      console.error("There was an error creating the unit:", error)
      toast.error("Error creating unit.")
    }
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-4">
        <Link href={`/courses/${courseId}`} className="text-blue-500 hover:underline">
          Back to Course
        </Link>
      </div>
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Create New Unit</h1>
          {isLoadingCourse ? <Skeleton width={200} height={20} /> : <Badge variant="secondary">{courseName}</Badge>}
        </div>
      </div>

      <div className="max-w-md mx-auto mt-8">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter unit title" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Enter unit description" className="resize-none" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="content"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Content</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Enter unit content" className="resize-none" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="unitType"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Unit Type</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a unit type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="ARTICLE">Article</SelectItem>
                      <SelectItem value="VIDEO">Video</SelectItem>
                      <SelectItem value="QUIZ">Quiz</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Create Unit</Button>
          </form>
        </Form>
      </div>
    </div>
  )
}

export default NewUnitPage
✅ File extracted


==========================================
FILE: src/app/courses/[courseId]/units/[unitId]/page.tsx
==========================================

// File not found: src/app/courses/[courseId]/units/[unitId]/page.tsx
❌ File not found


==========================================
FILE: src/app/courses/[courseId]/units/[unitId]/edit/page.tsx
==========================================

// File not found: src/app/courses/[courseId]/units/[unitId]/edit/page.tsx
❌ File not found


==========================================
FILE: src/app/courses/[courseId]/semesters/new/page.tsx
==========================================

"use client"

import { Button } from "@/components/ui/button"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { zodResolver } from "@hookform/resolvers/zod"
import { useRouter } from "next/navigation"
import { useEffect, useState } from "react"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { toast } from "sonner"
import { Skeleton } from "@/components/ui/skeleton"

const formSchema = z.object({
  name: z.string().min(2, {
    message: "Semester name must be at least 2 characters.",
  }),
})

interface Props {
  params: {
    courseId: string
  }
}

const SemesterCreateForm = ({ params }: Props) => {
  const router = useRouter()
  const [courseName, setCourseName] = useState<string | null>(null)
  const [isLoadingCourse, setIsLoadingCourse] = useState(true)
  const courseId = params.courseId

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
    },
  })

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      const response = await fetch(`/api/courses/${courseId}/semesters`, {
        method: "POST",
        body: JSON.stringify(values),
      })

      if (response.ok) {
        toast.success("Semester created successfully!")
        router.refresh()
        router.back()
      } else {
        toast.error("Something went wrong!")
      }
    } catch (error) {
      toast.error("Something went wrong!")
    }
  }

  useEffect(() => {
    let isMounted = true

    const fetchCourse = async () => {
      try {
        const res = await fetch(`/api/courses/${courseId}`, {
          cache: "no-store",
          next: { revalidate: 0 },
        })

        if (res.ok) {
          const data = await res.json()
          if (isMounted) {
            setCourseName(data.name)
          }
        }
      } catch (error) {
        console.error("Error fetching course:", error)
      } finally {
        if (isMounted) {
          setIsLoadingCourse(false)
        }
      }
    }

    fetchCourse()

    return () => {
      isMounted = false
    }
  }, [courseId])

  return (
    <div>
      <div className="mb-4">
        <Button variant="ghost" onClick={() => router.back()}>
          Back
        </Button>
        <h1 className="scroll-m-20 text-2xl font-semibold tracking-tight">Create Semester</h1>
        {isLoadingCourse ? (
          <Skeleton className="h-4 w-[200px]" />
        ) : (
          <p className="mt-2 text-sm text-muted-foreground">For course: {courseName}</p>
        )}
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Semester Name</FormLabel>
                <FormControl>
                  <Input placeholder="e.g. Fall 2024" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit">Submit</Button>
        </form>
      </Form>
    </div>
  )
}

export default SemesterCreateForm
✅ File extracted


==========================================
FILE: src/app/courses/[courseId]/semesters/[semesterId]/page.tsx
==========================================

// File not found: src/app/courses/[courseId]/semesters/[semesterId]/page.tsx
❌ File not found


==========================================
FILE: src/app/courses/[courseId]/semesters/[semesterId]/edit/page.tsx
==========================================

// File not found: src/app/courses/[courseId]/semesters/[semesterId]/edit/page.tsx
❌ File not found


==========================================
FILE: src/components/courses/course-form.tsx
==========================================

// File not found: src/components/courses/course-form.tsx
❌ File not found


==========================================
FILE: src/components/courses/course-list.tsx
==========================================

// File not found: src/components/courses/course-list.tsx
❌ File not found


==========================================
FILE: src/components/courses/semester-form.tsx
==========================================

// File not found: src/components/courses/semester-form.tsx
❌ File not found


==========================================
FILE: src/components/courses/unit-form.tsx
==========================================

// File not found: src/components/courses/unit-form.tsx
❌ File not found


==========================================
FILE: src/components/page-layout.tsx
==========================================

import Navbar from "@/components/navbar"
import { SparklesCore } from "@/components/sparkles"
import Sidebar from "@/components/sidebar"
import { FloatingPaper } from "@/components/floating-paper"
import type { ReactNode } from "react"

interface PageLayoutProps {
  children: ReactNode
  showFloatingPapers?: boolean
}

export default function PageLayout({ children, showFloatingPapers = true }: PageLayoutProps) {
  return (
    <main className="min-h-screen bg-black/[0.96] antialiased bg-grid-white/[0.02] relative overflow-hidden">
      {/* Ambient background with moving particles */}
      <div className="h-full w-full absolute inset-0 z-0">
        <SparklesCore
          id="tsparticlesfullpage"
          background="transparent"
          minSize={0.6}
          maxSize={1.4}
          particleDensity={100}
          className="w-full h-full"
          particleColor="#FFFFFF"
        />
      </div>

      {/* Floating papers background */}
      {showFloatingPapers && (
        <div className="absolute inset-0 overflow-hidden z-0">
          <FloatingPaper count={6} />
        </div>
      )}

      <div className="relative z-10 flex h-screen overflow-hidden">
        <Sidebar />
        <div className="flex-1 flex flex-col">
          <Navbar />
          <div className="flex-1 overflow-auto">{children}</div>
        </div>
      </div>
    </main>
  )
}✅ File extracted


==========================================
FILE: src/components/navbar.tsx
==========================================

"use client"

import { Button } from "@/components/ui/button"
import { Bot, Menu, Bell, User } from "lucide-react"
import { motion } from "framer-motion"
import Link from "next/link"
import { useState } from "react"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { usePathname } from "next/navigation"

export default function Navbar() {
  const [notifications] = useState(3)
  const pathname = usePathname()

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      className="flex items-center justify-between px-6 py-4 backdrop-blur-sm border-b border-white/10"
    >
      <div className="flex items-center space-x-2 md:hidden">
        <Button variant="ghost" size="icon" className="text-white">
          <Menu className="w-6 h-6" />
        </Button>
      </div>

      <div className="hidden md:flex items-center space-x-8">
        <Link href="/" className="flex items-center space-x-2">
          <Bot className="w-8 h-8 text-purple-500" />
          <span className="text-white font-medium text-xl">EduRAG</span>
        </Link>

        <Link href="/" className={`text-gray-300 hover:text-white ${pathname === "/" ? "text-white" : ""}`}>
          Home
        </Link>
        <Link
          href="/documents"
          className={`text-gray-300 hover:text-white ${pathname === "/documents" ? "text-white" : ""}`}
        >
          Documents
        </Link>
        <Link
          href="/courses"
          className={`text-gray-300 hover:text-white ${pathname === "/courses" ? "text-white" : ""}`}
        >
          Courses
        </Link>
        <Link
          href="/assistant"
          className={`text-gray-300 hover:text-white ${pathname === "/assistant" ? "text-white" : ""}`}
        >
          AI Assistant
        </Link>
        <Link href="/admin" className={`text-gray-300 hover:text-white ${pathname === "/admin" ? "text-white" : ""}`}>
          Admin
        </Link>
      </div>

      <div className="flex items-center space-x-4">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="relative text-white">
              <Bell className="w-5 h-5" />
              {notifications > 0 && (
                <span className="absolute top-0 right-0 h-4 w-4 bg-purple-500 rounded-full flex items-center justify-center text-[10px]">
                  {notifications}
                </span>
              )}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            align="end"
            className="w-56 bg-black/80 backdrop-blur-md border border-white/10 text-white"
          >
            <DropdownMenuItem className="focus:bg-white/10">
              <span>New document uploaded</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="focus:bg-white/10">
              <span>Course content updated</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="focus:bg-white/10">
              <span>New semester added</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="text-white">
              <User className="w-5 h-5" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            align="end"
            className="w-56 bg-black/80 backdrop-blur-md border border-white/10 text-white"
          >
            <DropdownMenuItem className="focus:bg-white/10">
              <span>Profile</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="focus:bg-white/10">
              <span>Settings</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="focus:bg-white/10">
              <span>Sign out</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </motion.nav>
  )
}✅ File extracted


==========================================
FILE: src/components/sidebar.tsx
==========================================

"use client"

import type React from "react"

import { useState } from "react"
import { motion } from "framer-motion"
import {
  ChevronDown,
  ChevronRight,
  BookOpen,
  Calendar,
  Layers,
  FileText,
  Home,
  BarChart,
  Settings,
  Users,
  MessageSquare,
  Sparkles,
} from "lucide-react"
import { cn } from "@/lib/utils"
import Link from "next/link"
import { usePathname } from "next/navigation"

type NavItemType = {
  id: string
  label: string
  icon?: React.ReactNode
  href?: string
  children?: NavItemType[]
}

export default function Sidebar() {
  const pathname = usePathname()
  const [expanded, setExpanded] = useState<Record<string, boolean>>({
    "course-1": true,
    "semester-1": true,
  })

  const toggleExpand = (id: string) => {
    setExpanded((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  const navItems: NavItemType[] = [
    {
      id: "home",
      label: "Home",
      icon: <Home className="w-5 h-5" />,
      href: "/",
    },
    {
      id: "documents",
      label: "Documents",
      icon: <FileText className="w-5 h-5" />,
      href: "/documents",
    },
    {
      id: "assistant",
      label: "AI Assistant",
      icon: <MessageSquare className="w-5 h-5" />,
      href: "/assistant",
    },
    {
      id: "quiz",
      label: "Knowledge Pulse",
      icon: <Sparkles className="w-5 h-5" />,
      href: "/quiz",
    },
    {
      id: "courses",
      label: "Courses",
      icon: <BookOpen className="w-5 h-5" />,
      children: [
        {
          id: "course-1",
          label: "Computer Science",
          icon: <BookOpen className="w-4 h-4" />,
          children: [
            {
              id: "semester-1",
              label: "Fall 2023",
              icon: <Calendar className="w-4 h-4" />,
              children: [
                {
                  id: "unit-1",
                  label: "Algorithms",
                  icon: <Layers className="w-4 h-4" />,
                  children: [
                    {
                      id: "doc-1",
                      label: "Sorting Algorithms",
                      icon: <FileText className="w-4 h-4" />,
                    },
                    {
                      id: "doc-2",
                      label: "Graph Algorithms",
                      icon: <FileText className="w-4 h-4" />,
                    },
                  ],
                },
                {
                  id: "unit-2",
                  label: "Data Structures",
                  icon: <Layers className="w-4 h-4" />,
                },
              ],
            },
            {
              id: "semester-2",
              label: "Spring 2024",
              icon: <Calendar className="w-4 h-4" />,
            },
          ],
        },
        {
          id: "course-2",
          label: "Mathematics",
          icon: <BookOpen className="w-4 h-4" />,
        },
      ],
    },
    {
      id: "analytics",
      label: "Analytics",
      icon: <BarChart className="w-5 h-5" />,
      href: "/admin",
    },
    {
      id: "users",
      label: "Users",
      icon: <Users className="w-5 h-5" />,
    },
    {
      id: "settings",
      label: "Settings",
      icon: <Settings className="w-5 h-5" />,
    },
  ]

  const renderNavItems = (items: NavItemType[], depth = 0) => {
    return items.map((item) => (
      <div key={item.id} className={cn("mb-1", depth > 0 && "ml-4")}>
        {item.href ? (
          <Link href={item.href}>
            <div
              className={cn(
                "flex items-center px-3 py-2 rounded-md text-gray-300 hover:text-white transition-colors cursor-pointer",
                pathname === item.href && "bg-purple-500/20 text-white",
              )}
            >
              {item.icon && <span className="mr-2">{item.icon}</span>}
              <span className="flex-1 text-sm">{item.label}</span>
            </div>
          </Link>
        ) : (
          <div
            className={cn(
              "flex items-center px-3 py-2 rounded-md text-gray-300 hover:text-white transition-colors cursor-pointer",
            )}
            onClick={() => (item.children ? toggleExpand(item.id) : null)}
          >
            {item.icon && <span className="mr-2">{item.icon}</span>}
            <span className="flex-1 text-sm">{item.label}</span>
            {item.children &&
              (expanded[item.id] ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />)}
          </div>
        )}
        {item.children && expanded[item.id] && <div className="mt-1">{renderNavItems(item.children, depth + 1)}</div>}
      </div>
    ))
  }

  return (
    <motion.div
      initial={{ x: -300 }}
      animate={{ x: 0 }}
      className="w-64 h-screen bg-black/50 backdrop-blur-md border-r border-white/10 overflow-y-auto hidden md:block"
    >
      <div className="p-4">
        <Link href="/">
          <div className="flex items-center space-x-2 mb-6 px-2">
            <BookOpen className="w-8 h-8 text-purple-500" />
            <span className="text-white font-medium text-xl">EduRAG</span>
          </div>
        </Link>
        <div className="space-y-1">{renderNavItems(navItems)}</div>
      </div>
    </motion.div>
  )
}✅ File extracted


==========================================
FILE: src/app/api/courses/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface CourseCreateRequest {
  name: string;
  description?: string;
}

// GET all courses
export async function GET(): Promise<NextResponse> {
  try {
    const courses = await prisma.course.findMany({
      include: {
        units: true,
        semesters: true,
        _count: {
          select: { documents: true }
        }
      }
    });
    
    return NextResponse.json(courses);
  } catch (error) {
    console.error('Error fetching courses:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// POST create a new course
export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    const body: CourseCreateRequest = await request.json();
    const { name, description } = body;
    
    if (!name) {
      return NextResponse.json({ error: 'Course name is required' }, { status: 400 });
    }
    
    const course = await prisma.course.create({
      data: {
        name,
        description
      }
    });
    
    return NextResponse.json(course, { status: 201 });
  } catch (error) {
    console.error('Error creating course:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted


==========================================
FILE: src/app/api/courses/[courseId]/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface CourseUpdateRequest {
  name?: string;
  description?: string;
}

interface RouteParams {
  params: {
    courseId: string;
  };
}

// GET specific course by ID
export async function GET(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    const course = await prisma.course.findUnique({
      where: { id: courseId },
      include: {
        units: true,
        semesters: true,
        documents: true
      }
    });
    
    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }
    
    return NextResponse.json(course);
  } catch (error) {
    console.error('Error fetching course:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// PATCH update course
export async function PATCH(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    const body: CourseUpdateRequest = await request.json();
    const { name, description } = body;
    
    const updatedCourse = await prisma.course.update({
      where: { id: courseId },
      data: {
        ...(name !== undefined && { name }),
        ...(description !== undefined && { description })
      }
    });
    
    return NextResponse.json(updatedCourse);
  } catch (error) {
    console.error('Error updating course:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// DELETE course
export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    await prisma.course.delete({
      where: { id: courseId }
    });
    
    return NextResponse.json({ message: 'Course deleted successfully' });
  } catch (error) {
    console.error('Error deleting course:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted


==========================================
FILE: src/app/api/courses/[courseId]/units/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface UnitCreateRequest {
  name: string;
  description?: string;
}

interface RouteParams {
  params: {
    courseId: string;
  };
}

// GET all units for a course
export async function GET(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    const units = await prisma.unit.findMany({
      where: { courseId },
      include: {
        _count: {
          select: { documents: true }
        }
      }
    });
    
    return NextResponse.json(units);
  } catch (error) {
    console.error('Error fetching units:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// POST create a new unit for a course
export async function POST(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    // Check if course exists
    const course = await prisma.course.findUnique({
      where: { id: courseId }
    });
    
    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }
    
    const body: UnitCreateRequest = await request.json();
    const { name, description } = body;
    
    if (!name) {
      return NextResponse.json({ error: 'Unit name is required' }, { status: 400 });
    }
    
    const unit = await prisma.unit.create({
      data: {
        name,
        description,
        courseId
      }
    });
    
    return NextResponse.json(unit, { status: 201 });
  } catch (error) {
    console.error('Error creating unit:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted


==========================================
FILE: src/app/api/courses/[courseId]/units/[unitId]/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface UnitUpdateRequest {
  name?: string;
  description?: string;
}

interface RouteParams {
  params: {
    courseId: string;
    unitId: string;
  };
}

// GET specific unit
export async function GET(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { unitId } = params;
  
  try {
    const unit = await prisma.unit.findUnique({
      where: { id: unitId },
      include: {
        documents: true
      }
    });
    
    if (!unit) {
      return NextResponse.json({ error: 'Unit not found' }, { status: 404 });
    }
    
    return NextResponse.json(unit);
  } catch (error) {
    console.error('Error fetching unit:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// PATCH update unit
export async function PATCH(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { unitId } = params;
  
  try {
    const body: UnitUpdateRequest = await request.json();
    const { name, description } = body;
    
    const updatedUnit = await prisma.unit.update({
      where: { id: unitId },
      data: {
        ...(name !== undefined && { name }),
        ...(description !== undefined && { description })
      }
    });
    
    return NextResponse.json(updatedUnit);
  } catch (error) {
    console.error('Error updating unit:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// DELETE unit
export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { unitId } = params;
  
  try {
    await prisma.unit.delete({
      where: { id: unitId }
    });
    
    return NextResponse.json({ message: 'Unit deleted successfully' });
  } catch (error) {
    console.error('Error deleting unit:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted


==========================================
FILE: src/app/api/courses/[courseId]/semesters/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface SemesterCreateRequest {
  name: string;
}

interface RouteParams {
  params: {
    courseId: string;
  };
}

// GET all semesters for a course
export async function GET(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    const semesters = await prisma.semester.findMany({
      where: { courseId },
      include: {
        _count: {
          select: { documents: true }
        }
      }
    });
    
    return NextResponse.json(semesters);
  } catch (error) {
    console.error('Error fetching semesters:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// POST create a new semester for a course
export async function POST(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { courseId } = params;
  
  try {
    // Check if course exists
    const course = await prisma.course.findUnique({
      where: { id: courseId }
    });
    
    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }
    
    const body: SemesterCreateRequest = await request.json();
    const { name } = body;
    
    if (!name) {
      return NextResponse.json({ error: 'Semester name is required' }, { status: 400 });
    }
    
    const semester = await prisma.semester.create({
      data: {
        name,
        courseId
      }
    });
    
    return NextResponse.json(semester, { status: 201 });
  } catch (error) {
    console.error('Error creating semester:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted


==========================================
FILE: src/app/api/courses/[courseId]/semesters/[semesterId]/route.ts
==========================================

import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NextRequest } from 'next/server';

const prisma = new PrismaClient();

interface SemesterUpdateRequest {
  name?: string;
}

interface RouteParams {
  params: {
    courseId: string;
    semesterId: string;
  };
}

// GET specific semester
export async function GET(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { semesterId } = params;
  
  try {
    const semester = await prisma.semester.findUnique({
      where: { id: semesterId },
      include: {
        documents: true
      }
    });
    
    if (!semester) {
      return NextResponse.json({ error: 'Semester not found' }, { status: 404 });
    }
    
    return NextResponse.json(semester);
  } catch (error) {
    console.error('Error fetching semester:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// PATCH update semester
export async function PATCH(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { semesterId } = params;
  
  try {
    const body: SemesterUpdateRequest = await request.json();
    const { name } = body;
    
    if (!name) {
      return NextResponse.json({ error: 'Semester name is required' }, { status: 400 });
    }
    
    const updatedSemester = await prisma.semester.update({
      where: { id: semesterId },
      data: { name }
    });
    
    return NextResponse.json(updatedSemester);
  } catch (error) {
    console.error('Error updating semester:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}

// DELETE semester
export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
): Promise<NextResponse> {
  const { semesterId } = params;
  
  try {
    await prisma.semester.delete({
      where: { id: semesterId }
    });
    
    return NextResponse.json({ message: 'Semester deleted successfully' });
  } catch (error) {
    console.error('Error deleting semester:', error);
    return NextResponse.json({ error: (error as Error).message }, { status: 500 });
  }
}✅ File extracted
